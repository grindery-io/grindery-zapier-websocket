{"version":3,"file":"grindery-nexus-client.esm.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\n\nconst WORKFLOW_ENGINE_URL = 'https://orchestrator.grindery.org';\n\ntype ServerError = { error: any };\n\nexport const sendEngineRequest = async (\n  method: string,\n  params: unknown,\n  token?: string | null\n) => {\n  const headers: any = {};\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n  try {\n    const res = await axios.post(\n      WORKFLOW_ENGINE_URL,\n      {\n        jsonrpc: '2.0',\n        method: method,\n        id: new Date(),\n        params: params,\n      },\n      {\n        headers,\n      }\n    );\n    if (res && res.data && res.data.result) {\n      return res.data.result;\n    } else {\n      throw new Error('Unknown error');\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const serverError = error as AxiosError<ServerError>;\n      if (\n        serverError.response &&\n        serverError.response.data &&\n        serverError.response.data.error\n      ) {\n        throw new Error(serverError.response.data.error.message);\n      }\n    } else {\n      throw new Error((error as Error).message);\n    }\n  }\n};\n\nexport const sendEngineHTTPRequest = async (\n  method: string,\n  path: string,\n  data: unknown,\n  token?: string | null\n) => {\n  const headers: any = {};\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n  try {\n    const res = await axios.request({\n      method,\n      url: WORKFLOW_ENGINE_URL + path,\n      data,\n      headers,\n    });\n    if (res && res.data && res.data.result) {\n      return res.data.result;\n    } else {\n      throw new Error('Unknown error');\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const serverError = error as AxiosError<ServerError>;\n      if (\n        serverError.response &&\n        serverError.response.data &&\n        serverError.response.data.error\n      ) {\n        throw new Error(serverError.response.data.error.message);\n      }\n    } else {\n      throw new Error((error as Error).message);\n    }\n  }\n};\n","import axios from 'axios';\nimport {\n  WorkflowExecution,\n  WorkflowExecutionLog,\n  Operation,\n  Workflow,\n} from './types';\nimport { sendEngineHTTPRequest, sendEngineRequest } from './utils';\n\nconst WEB2_CONNECTORS_PATH =\n  'https://api.github.com/repos/grindery-io/grindery-nexus-schema-v2/contents/cds/web2';\n\nconst WEB3_CONNECTORS_PATH =\n  'https://api.github.com/repos/grindery-io/grindery-nexus-schema-v2/contents/cds/web3';\n\nconst DRIVERS_URL = 'https://cds.grindery.org';\nconst DRIVERS_STAGING_URL = 'https://cds-staging.grindery.org';\n\n/**\n * Grindery Nexus Client\n *\n * @description A class to interact with Grindery Nexus engine API\n */\nclass NexusClient {\n  /**\n   * User authentication token\n   */\n  private token: string | null = null;\n\n  constructor() {}\n\n  /**\n   * Set authentication token\n   *\n   * @param {string} token - Authentication token\n   * @returns {void}\n   */\n  authenticate(token: string): void {\n    if (token) {\n      this.token = token;\n    } else {\n      throw new Error('Token required');\n    }\n  }\n\n  /**\n   * Get current authentication token. Authentication required.\n   * @returns {string} Authentication token\n   */\n  getToken(): string {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return this.token;\n  }\n\n  /**\n   * Creates new workflow. Authentication required.\n   * @param {Workflow} workflow - New workflow object\n   * @param {string} workspaceKey - Workspace key. Optional\n   * @returns {Promise} Promise object with new workflow key\n   */\n  async createWorkflow(\n    workflow: Workflow,\n    workspaceKey?: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workflow) {\n      throw new Error('Workflow object is required');\n    }\n    if (!workflow.creator) {\n      throw new Error('Workflow creator is required');\n    }\n    return await sendEngineRequest(\n      'or_createWorkflow',\n      {\n        workflow: workflow,\n        ...(typeof workspaceKey !== 'undefined' && { workspaceKey }),\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Lists user's workflows. Authentication required.\n   *\n   * @param {string} workspaceKey - Workspace key. Optional.\n   * @returns {Promise} Promise object with an array of user's workflows\n   */\n  async listWorkflows(workspaceKey?: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return await sendEngineRequest(\n      'or_listWorkflows',\n      {\n        ...(typeof workspaceKey !== 'undefined' && { workspaceKey }),\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Updates a single workflow. Authentication required.\n   *\n   * @param {string} key - Workflow key\n   * @param {Workflow} workflow - Updated workflow object\n   * @returns {Promise} Promise object with workflow key\n   */\n  async updateWorkflow(key: string, workflow: Workflow): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workflow key is required');\n    }\n    if (!workflow || !workflow.creator) {\n      throw new Error('Workflow creator is required');\n    }\n    return await sendEngineRequest(\n      'or_updateWorkflow',\n      {\n        key,\n        workflow,\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Gets workflow executions. Authentication required.\n   *\n   * @param {string} workflowKey - Workflow key\n   * @param {number} since - Since parameter used for pagination. Optional.\n   * @param {number} until - Until parameter used for pagination. Optional.\n   * @param {number} limit - Limit parameter used for pagination. Optional.\n   * @returns {Promise} Promise object with an array of workflow executions\n   */\n  async getWorkflowExecutions(\n    workflowKey: string,\n    since?: number,\n    until?: number,\n    limit?: number\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workflowKey) {\n      throw new Error('Workflow key is required');\n    }\n    return await sendEngineRequest(\n      'or_getWorkflowExecutions',\n      {\n        workflowKey,\n        ...(typeof since !== 'undefined' && { since }),\n        ...(typeof until !== 'undefined' && { until }),\n        ...(typeof limit !== 'undefined' && { limit }),\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Gets workflow execution log. Authentication required.\n   *\n   * @param {string} executionId - Workflow execution ID\n   * @returns {Promise} Promise object with workflow execution log\n   */\n  async getWorkflowExecutionLog(executionId: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!executionId) {\n      throw new Error('Workflow execution ID is required');\n    }\n    return await sendEngineRequest(\n      'or_getWorkflowExecutionLog',\n      {\n        executionId,\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Checks if user is approved for early access. Authentication required.\n   *\n   * @returns {Promise} Promise object with `true` if user is allowed and `false` if not\n   */\n  async isAllowedUser(): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return await sendEngineRequest('or_isAllowedUser', {}, this.token);\n  }\n\n  /**\n   * Tests driver action. Authentication required.\n   *\n   * @param {Operation} step - Workflow step\n   * @param input - Sample user input\n   * @param {string} environment - Specifiy execution environment (`production` or `staging`). Optional. Default value `production`.\n   * @returns {Promise} Promise object with action execution payload\n   */\n  async testAction(\n    step: Operation,\n    input: unknown,\n    environment?: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!step) {\n      throw new Error('Workflow step object is required');\n    }\n    if (!input) {\n      throw new Error('Sample input object is required');\n    }\n    return await sendEngineRequest(\n      'or_testAction',\n      {\n        step,\n        input,\n        environment: environment || 'production',\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Gets list of available connectors/drivers\n   * @deprecated since version 0.5.0\n   * @returns {Promise} Promise object with an array of connectors/drivers\n   */\n  async getConnectors(): Promise<any> {\n    const responses = [];\n    const web2Connectors = await axios.get(WEB2_CONNECTORS_PATH);\n    for (let i = 0; i < web2Connectors.data.length; i++) {\n      const url = web2Connectors.data[i].download_url;\n      if (url) {\n        responses.push(await axios.get(url));\n      }\n    }\n    const web3Connectors = await axios.get(WEB3_CONNECTORS_PATH);\n    for (let i = 0; i < web3Connectors.data.length; i++) {\n      const url = web3Connectors.data[i].download_url;\n      if (url) {\n        responses.push(await axios.get(url));\n      }\n    }\n\n    return responses\n      .filter(res => res && res.data)\n      .map(res => ({\n        ...res.data,\n        html_url:\n          (Array.isArray(web3Connectors.data) &&\n            web3Connectors.data.find(\n              c => c.name && c.name.includes(res.data.key)\n            ) &&\n            web3Connectors.data.find(\n              c => c.name && c.name.includes(res.data.key)\n            ).html_url) ||\n          (Array.isArray(web2Connectors.data) &&\n            web2Connectors.data.find(\n              c => c.name && c.name.includes(res.data.key)\n            ) &&\n            web2Connectors.data.find(\n              c => c.name && c.name.includes(res.data.key)\n            ).html_url) ||\n          '',\n      }));\n  }\n\n  /**\n   * Deletes user's workflow by key. Authentication required.\n   *\n   * @param {string} key - Workflow key\n   * @returns {Promise} Promise object with `deleted` property `true` or `false`\n   */\n  async deleteWorkflow(key: string): Promise<{ deleted: boolean }> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workflow key is required');\n    }\n    return await sendEngineRequest(\n      'or_deleteWorkflow',\n      {\n        key,\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Requests early access to Nexus app. Authentication required.\n   *\n   * @param {string} email - User email\n   * @returns {Promise} Promise object with `true` on success\n   */\n  async requestEarlyAccess(email: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!email) {\n      throw new Error('Email is required');\n    }\n    if (!/^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/.test(email)) {\n      throw new Error('Invalid email');\n    }\n    return await sendEngineRequest(\n      'or_requestEarlyAccess',\n      {\n        email,\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Saves user wallet address in CRM. Authentication required.\n   *\n   * @param {string} walletAddress - User wallet address\n   * @param {string} [email] - User email, optional\n   * @returns {Promise} Promise object with `true` on success\n   */\n  async saveWalletAddress(walletAddress: string, email?: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!walletAddress) {\n      throw new Error('Wallet address is required');\n    }\n    if (email && !/^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/.test(email)) {\n      throw new Error('Invalid email');\n    }\n    return await sendEngineRequest(\n      'or_saveWalletAddress',\n      {\n        email,\n        walletAddress,\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Sends request to an operation's `inputFieldProviderUrl`. Authentication required.\n   *\n   * @param {string} connectorKey - Connector key\n   * @param {string} operationKey - Trigger or Action operation key\n   * @param {object} body - JSON RPC request object with user input\n   * @param {string} environment - Specifiy execution environment. Use `staging` for staging environment. Optional.\n   * @returns {Promise} Promise object with operation's field provider response\n   */\n  async callInputProvider(\n    connectorKey: string,\n    operationKey: string,\n    body: any,\n    environment?: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!connectorKey) {\n      throw new Error('Connector key is required');\n    }\n    if (!operationKey) {\n      throw new Error('Operation key is required');\n    }\n    if (!body) {\n      throw new Error('JSON RPC request object is required');\n    }\n    if (!body.method || body.method !== 'grinderyNexusConnectorUpdateFields') {\n      throw new Error(\n        'JSON RPC request object must have \"method\" property with value \"grinderyNexusConnectorUpdateFields\"'\n      );\n    }\n    if (!body.jsonrpc || body.jsonrpc !== '2.0') {\n      throw new Error('JSON RPC request object must have 2.0 version');\n    }\n    if (!body.params || !body.params.key) {\n      throw new Error(\n        'JSON RPC request object must have \"params\" property with operation key specified'\n      );\n    }\n    if (body.params.key !== operationKey) {\n      throw new Error(\n        'JSON RPC request object params \"key\" property must be equal to operationKey'\n      );\n    }\n    return await sendEngineHTTPRequest(\n      'POST',\n      `/input-provider/${connectorKey}/${operationKey}${\n        environment ? '?_grinderyEnvironment=' + environment : ''\n      }`,\n      body,\n      this.token\n    );\n  }\n\n  /**\n   * Sends webhook to a trigger\n   *\n   * @param {string} connectorKey - Connector key\n   * @param {string} operationKey - Trigger operation key\n   * @param {object} body - JSON body\n   * @param {string} environment - Specifiy execution environment. Use `staging` for staging environment. Optional.\n   * @returns {Promise} Promise object with JSON RPC 2.0 response\n   */\n  async callWebhook(\n    connectorKey: string,\n    operationKey: string,\n    body: any,\n    environment?: string\n  ): Promise<any> {\n    if (!connectorKey) {\n      throw new Error('Connector key is required');\n    }\n    if (!operationKey) {\n      throw new Error('Operation key is required');\n    }\n    if (!body) {\n      throw new Error('Body object is required');\n    }\n    return await sendEngineHTTPRequest(\n      'POST',\n      `/webhook/${connectorKey}/${operationKey}${\n        environment ? '?_grinderyEnvironment=' + environment : ''\n      }`,\n      body\n    );\n  }\n\n  /**\n   * Gets list of drivers\n   *\n   * @since 0.5.0\n   * @param {string} environment - Set environment for getting drivers. Optional.\n   * @returns {Promise} Promise object with an array of drivers\n   */\n  async listDrivers(environment?: string): Promise<any> {\n    let driversIndexURL = `${DRIVERS_URL}/_index.json`;\n\n    if (environment && environment === 'staging') {\n      driversIndexURL = `${DRIVERS_STAGING_URL}/_index.json`;\n    }\n    const res = await axios.get(driversIndexURL).catch(() => {\n      return null;\n    });\n    if (res && res.data) {\n      return Object.keys(res.data).map(key => ({\n        ...res.data[key],\n      }));\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Gets single driver\n   *\n   * @since 0.5.0\n   * @param {string} driverKey - Driver key\n   * @param {string} environment - Set environment for getting driver. Optional.\n   * @returns {Promise} Promise object with a CDS object or `null` if driver not found\n   */\n  async getDriver(driverKey: string, environment?: string): Promise<any> {\n    if (!driverKey) {\n      throw new Error('Driver key required');\n    }\n    let driverURL = `${DRIVERS_URL}/${driverKey}.json`;\n\n    if (environment && environment === 'staging') {\n      driverURL = `${DRIVERS_STAGING_URL}/${driverKey}.json`;\n    }\n    const res = await axios.get(driverURL).catch(() => {\n      return null;\n    });\n    if (res && res.data) {\n      return res.data;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Gets list of user's workspaces\n   *\n   * @since 0.6.0\n   * @returns {Promise} Promise object with an array of user's workspaces\n   */\n  async listWorkspaces(): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return await sendEngineRequest('or_listWorkspaces', {}, this.token);\n  }\n\n  /**\n   * Creates new workspace\n   *\n   * @since 0.6.0\n   * @param {object} workspace - Workspace properties\n   * @returns {Promise} Promise object with a created workspace key\n   */\n  async createWorkspace(workspace: {\n    title: string;\n    iconUrl?: string;\n    about?: string;\n    admins?: string[];\n    users?: string[];\n  }): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workspace.title) {\n      throw new Error('Workspace title is required');\n    }\n    return await sendEngineRequest('or_createWorkspace', workspace, this.token);\n  }\n\n  /**\n   * Updates a workspace\n   *\n   * @since 0.6.0\n   * @param {object} workspace - Workspace properties\n   * @returns {Promise} Promise object with an updated workspace\n   */\n  async updateWorkspace(workspace: {\n    key: string;\n    title?: string;\n    iconUrl?: string;\n    about?: string;\n    admins?: string[];\n    users?: string[];\n  }): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workspace.key) {\n      throw new Error('Workspace key is required');\n    }\n    if (workspace.admins && !Array.isArray(workspace.admins)) {\n      throw new Error('Admins must be an array');\n    }\n    if (workspace.users && !Array.isArray(workspace.users)) {\n      throw new Error('Users must be an array');\n    }\n    return await sendEngineRequest('or_updateWorkspace', workspace, this.token);\n  }\n\n  /**\n   * Removes user from a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @returns {Promise} Promise object with a `left` property equals `true` on success\n   */\n  async leaveWorkspace(key: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    return await sendEngineRequest('or_leaveWorkspace', { key }, this.token);\n  }\n\n  /**\n   * Deletes workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @returns {Promise} Promise object with `true` on success\n   */\n  async deleteWorkspace(key: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    return await sendEngineRequest('or_deleteWorkspace', { key }, this.token);\n  }\n\n  /**\n   * Moves workflow to a workspace\n   *\n   * @since 0.6.0\n   * @param {string} workflowKey - Workflow key\n   * @param {string} workspaceKey - The destination workspace key\n   * @returns {Promise} Promise object with `true` on success\n   */\n  async moveWorkflowToWorkspace(\n    workflowKey: string,\n    workspaceKey: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workflowKey) {\n      throw new Error('Workflow key is required');\n    }\n    return await sendEngineRequest(\n      'or_moveWorkflowToWorkspace',\n      { key: workflowKey, newWorkspaceKey: workspaceKey },\n      this.token\n    );\n  }\n\n  /**\n   * Adds user (member) to a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @param {string} userAccountId - User account ID\n   * @returns {Promise} Promise object with updated workspace properties\n   */\n  async addUserToWorkspace(key: string, userAccountId: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    if (!userAccountId) {\n      throw new Error('User ID is required');\n    }\n    return await sendEngineRequest(\n      'or_workspaceAddUser',\n      { key: key, accountId: userAccountId },\n      this.token\n    );\n  }\n\n  /**\n   * Removes user (member) from a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @param {string} userAccountId - User account ID\n   * @returns {Promise} Promise object with updated workspace properties\n   */\n  async removeUserFromWorkspace(\n    key: string,\n    userAccountId: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    if (!userAccountId) {\n      throw new Error('User ID is required');\n    }\n    return await sendEngineRequest(\n      'or_workspaceRemoveUser',\n      { key: key, accountId: userAccountId },\n      this.token\n    );\n  }\n\n  /**\n   * Adds admin to a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @param {string} userAccountId - User account ID\n   * @returns {Promise} Promise object with updated workspace properties\n   */\n  async addAdminToWorkspace(key: string, userAccountId: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    if (!userAccountId) {\n      throw new Error('User ID is required');\n    }\n    return await sendEngineRequest(\n      'or_workspaceAddAdmin',\n      { key: key, accountId: userAccountId },\n      this.token\n    );\n  }\n\n  /**\n   * Removes admin from a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @param {string} userAccountId - User account ID\n   * @returns {Promise} Promise object with updated workspace properties\n   */\n  async removeAdminFromWorkspace(\n    key: string,\n    userAccountId: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    if (!userAccountId) {\n      throw new Error('User ID is required');\n    }\n    return await sendEngineRequest(\n      'or_workspaceRemoveAdmin',\n      { key: key, accountId: userAccountId },\n      this.token\n    );\n  }\n\n  /**\n   * Gets list of user's saved authentication credentials. Authentication required.\n   *\n   * @since 0.7.0\n   * @param {string} connectorId - Connector key\n   * @param {string} environment - Environment (`production` or `staging`)\n   * @returns {Promise} Promise object with a list of saved credentials\n   */\n   async listAuthCredentials(\n    connectorId: string,\n    environment: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!connectorId) {\n      throw new Error('Connector ID is required');\n    }\n    if (!environment) {\n      throw new Error('Environment is required');\n    }\n    return await sendEngineRequest(\n      'or_listAuthCredentials',\n      { connectorId: connectorId, environment: environment },\n      this.token\n    );\n  }\n\n  /**\n   * Updates saved authentication credential. Authentication required.\n   *\n   * @since 0.7.0\n   * @param {string} key - Credential key\n   * @param {string} displayName - New display name\n   * @returns {Promise} Promise object with updated credential\n   */\n   async updateAuthCredentials(\n    key: string,\n    displayName: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Credential key is required');\n    }\n    if (!displayName) {\n      throw new Error('Display name is required');\n    }\n    return await sendEngineRequest(\n      'or_updateAuthCredentials',\n      { key: key, displayName: displayName },\n      this.token\n    );\n  }\n\n  /**\n   * Adds connector secrets (for admin only). Authentication required.\n   *\n   * @since 0.7.0\n   * @param {string} connectorId - Credential key\n   * @param {object} secrets - Object with key-value pairs\n   * @param {string} environment - Environment (`production` or `staging`)\n   * @returns {Promise} Promise\n   */\n   async putConnectorSecrets(\n    connectorId: string,\n    secrets: { [key: string]: unknown },\n    environment: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!connectorId) {\n      throw new Error('Connector ID is required');\n    }\n    if (!secrets) {\n      throw new Error('Secrets object is required');\n    }\n    if (!environment) {\n      throw new Error('Environment is required');\n    }\n    return await sendEngineRequest(\n      'or_putConnectorSecrets',\n      { connectorId: connectorId, secrets: secrets, environment: environment},\n      this.token\n    );\n  }\n\n\n}\n\nexport { Operation, Workflow, WorkflowExecution, WorkflowExecutionLog };\n\nexport default NexusClient;\n"],"names":["WORKFLOW_ENGINE_URL","sendEngineRequest","method","params","token","headers","Authorization","axios","post","jsonrpc","id","Date","res","data","result","Error","isAxiosError","serverError","response","error","message","sendEngineHTTPRequest","path","request","url","WEB2_CONNECTORS_PATH","WEB3_CONNECTORS_PATH","DRIVERS_URL","DRIVERS_STAGING_URL","NexusClient","authenticate","getToken","createWorkflow","workflow","workspaceKey","creator","listWorkflows","updateWorkflow","key","getWorkflowExecutions","workflowKey","since","until","limit","getWorkflowExecutionLog","executionId","isAllowedUser","testAction","step","input","environment","getConnectors","responses","get","web2Connectors","i","length","download_url","push","web3Connectors","filter","map","html_url","Array","isArray","find","c","name","includes","deleteWorkflow","requestEarlyAccess","email","test","saveWalletAddress","walletAddress","callInputProvider","connectorKey","operationKey","body","callWebhook","listDrivers","driversIndexURL","Object","keys","getDriver","driverKey","driverURL","listWorkspaces","createWorkspace","workspace","title","updateWorkspace","admins","users","leaveWorkspace","deleteWorkspace","moveWorkflowToWorkspace","newWorkspaceKey","addUserToWorkspace","userAccountId","accountId","removeUserFromWorkspace","addAdminToWorkspace","removeAdminFromWorkspace","listAuthCredentials","connectorId","updateAuthCredentials","displayName","putConnectorSecrets","secrets"],"mappings":"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"}