import axios from 'axios';

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var WORKFLOW_ENGINE_URL = 'https://orchestrator.grindery.org';
var sendEngineRequest = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(method, params, token) {
    var headers, res, serverError;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            headers = {};

            if (token) {
              headers.Authorization = "Bearer " + token;
            }

            _context.prev = 2;
            _context.next = 5;
            return axios.post(WORKFLOW_ENGINE_URL, {
              jsonrpc: '2.0',
              method: method,
              id: new Date(),
              params: params
            }, {
              headers: headers
            });

          case 5:
            res = _context.sent;

            if (!(res && res.data && res.data.result)) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", res.data.result);

          case 10:
            throw new Error('Unknown error');

          case 11:
            _context.next = 22;
            break;

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](2);

            if (!axios.isAxiosError(_context.t0)) {
              _context.next = 21;
              break;
            }

            serverError = _context.t0;

            if (!(serverError.response && serverError.response.data && serverError.response.data.error)) {
              _context.next = 19;
              break;
            }

            throw new Error(serverError.response.data.error.message);

          case 19:
            _context.next = 22;
            break;

          case 21:
            throw new Error(_context.t0.message);

          case 22:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 13]]);
  }));

  return function sendEngineRequest(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var sendEngineHTTPRequest = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(method, path, data, token) {
    var headers, res, serverError;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            headers = {};

            if (token) {
              headers.Authorization = "Bearer " + token;
            }

            _context2.prev = 2;
            _context2.next = 5;
            return axios.request({
              method: method,
              url: WORKFLOW_ENGINE_URL + path,
              data: data,
              headers: headers
            });

          case 5:
            res = _context2.sent;

            if (!(res && res.data && res.data.result)) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", res.data.result);

          case 10:
            throw new Error('Unknown error');

          case 11:
            _context2.next = 22;
            break;

          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2["catch"](2);

            if (!axios.isAxiosError(_context2.t0)) {
              _context2.next = 21;
              break;
            }

            serverError = _context2.t0;

            if (!(serverError.response && serverError.response.data && serverError.response.data.error)) {
              _context2.next = 19;
              break;
            }

            throw new Error(serverError.response.data.error.message);

          case 19:
            _context2.next = 22;
            break;

          case 21:
            throw new Error(_context2.t0.message);

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2, 13]]);
  }));

  return function sendEngineHTTPRequest(_x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();

var WEB2_CONNECTORS_PATH = 'https://api.github.com/repos/grindery-io/grindery-nexus-schema-v2/contents/cds/web2';
var WEB3_CONNECTORS_PATH = 'https://api.github.com/repos/grindery-io/grindery-nexus-schema-v2/contents/cds/web3';
var DRIVERS_URL = 'https://cds.grindery.org';
var DRIVERS_STAGING_URL = 'https://cds-staging.grindery.org';
/**
 * Grindery Nexus Client
 *
 * @description A class to interact with Grindery Nexus engine API
 */

var NexusClient = /*#__PURE__*/function () {
  function NexusClient() {
    /**
     * User authentication token
     */
    this.token = null;
  }
  /**
   * Set authentication token
   *
   * @param {string} token - Authentication token
   * @returns {void}
   */


  var _proto = NexusClient.prototype;

  _proto.authenticate = function authenticate(token) {
    if (token) {
      this.token = token;
    } else {
      throw new Error('Token required');
    }
  }
  /**
   * Get current authentication token. Authentication required.
   * @returns {string} Authentication token
   */
  ;

  _proto.getToken = function getToken() {
    if (!this.token) {
      throw new Error('Authentication required');
    }

    return this.token;
  }
  /**
   * Creates new workflow. Authentication required.
   * @param {Workflow} workflow - New workflow object
   * @param {string} workspaceKey - Workspace key. Optional
   * @returns {Promise} Promise object with new workflow key
   */
  ;

  _proto.createWorkflow =
  /*#__PURE__*/
  function () {
    var _createWorkflow = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(workflow, workspaceKey) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (this.token) {
                _context.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (workflow) {
                _context.next = 4;
                break;
              }

              throw new Error('Workflow object is required');

            case 4:
              if (workflow.creator) {
                _context.next = 6;
                break;
              }

              throw new Error('Workflow creator is required');

            case 6:
              _context.next = 8;
              return sendEngineRequest('or_createWorkflow', _extends({
                workflow: workflow
              }, typeof workspaceKey !== 'undefined' && {
                workspaceKey: workspaceKey
              }), this.token);

            case 8:
              return _context.abrupt("return", _context.sent);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function createWorkflow(_x, _x2) {
      return _createWorkflow.apply(this, arguments);
    }

    return createWorkflow;
  }()
  /**
   * Lists user's workflows. Authentication required.
   *
   * @param {string} workspaceKey - Workspace key. Optional.
   * @returns {Promise} Promise object with an array of user's workflows
   */
  ;

  _proto.listWorkflows =
  /*#__PURE__*/
  function () {
    var _listWorkflows = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(workspaceKey) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (this.token) {
                _context2.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              _context2.next = 4;
              return sendEngineRequest('or_listWorkflows', _extends({}, typeof workspaceKey !== 'undefined' && {
                workspaceKey: workspaceKey
              }), this.token);

            case 4:
              return _context2.abrupt("return", _context2.sent);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function listWorkflows(_x3) {
      return _listWorkflows.apply(this, arguments);
    }

    return listWorkflows;
  }()
  /**
   * Updates a single workflow. Authentication required.
   *
   * @param {string} key - Workflow key
   * @param {Workflow} workflow - Updated workflow object
   * @returns {Promise} Promise object with workflow key
   */
  ;

  _proto.updateWorkflow =
  /*#__PURE__*/
  function () {
    var _updateWorkflow = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key, workflow) {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (this.token) {
                _context3.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (key) {
                _context3.next = 4;
                break;
              }

              throw new Error('Workflow key is required');

            case 4:
              if (!(!workflow || !workflow.creator)) {
                _context3.next = 6;
                break;
              }

              throw new Error('Workflow creator is required');

            case 6:
              _context3.next = 8;
              return sendEngineRequest('or_updateWorkflow', {
                key: key,
                workflow: workflow
              }, this.token);

            case 8:
              return _context3.abrupt("return", _context3.sent);

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function updateWorkflow(_x4, _x5) {
      return _updateWorkflow.apply(this, arguments);
    }

    return updateWorkflow;
  }()
  /**
   * Gets workflow executions. Authentication required.
   *
   * @param {string} workflowKey - Workflow key
   * @param {number} since - Since parameter used for pagination. Optional.
   * @param {number} until - Until parameter used for pagination. Optional.
   * @param {number} limit - Limit parameter used for pagination. Optional.
   * @returns {Promise} Promise object with an array of workflow executions
   */
  ;

  _proto.getWorkflowExecutions =
  /*#__PURE__*/
  function () {
    var _getWorkflowExecutions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(workflowKey, since, until, limit) {
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (this.token) {
                _context4.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (workflowKey) {
                _context4.next = 4;
                break;
              }

              throw new Error('Workflow key is required');

            case 4:
              _context4.next = 6;
              return sendEngineRequest('or_getWorkflowExecutions', _extends({
                workflowKey: workflowKey
              }, typeof since !== 'undefined' && {
                since: since
              }, typeof until !== 'undefined' && {
                until: until
              }, typeof limit !== 'undefined' && {
                limit: limit
              }), this.token);

            case 6:
              return _context4.abrupt("return", _context4.sent);

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getWorkflowExecutions(_x6, _x7, _x8, _x9) {
      return _getWorkflowExecutions.apply(this, arguments);
    }

    return getWorkflowExecutions;
  }()
  /**
   * Gets workflow execution log. Authentication required.
   *
   * @param {string} executionId - Workflow execution ID
   * @returns {Promise} Promise object with workflow execution log
   */
  ;

  _proto.getWorkflowExecutionLog =
  /*#__PURE__*/
  function () {
    var _getWorkflowExecutionLog = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(executionId) {
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (this.token) {
                _context5.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (executionId) {
                _context5.next = 4;
                break;
              }

              throw new Error('Workflow execution ID is required');

            case 4:
              _context5.next = 6;
              return sendEngineRequest('or_getWorkflowExecutionLog', {
                executionId: executionId
              }, this.token);

            case 6:
              return _context5.abrupt("return", _context5.sent);

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getWorkflowExecutionLog(_x10) {
      return _getWorkflowExecutionLog.apply(this, arguments);
    }

    return getWorkflowExecutionLog;
  }()
  /**
   * Checks if user is approved for early access. Authentication required.
   *
   * @returns {Promise} Promise object with `true` if user is allowed and `false` if not
   */
  ;

  _proto.isAllowedUser =
  /*#__PURE__*/
  function () {
    var _isAllowedUser = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (this.token) {
                _context6.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              _context6.next = 4;
              return sendEngineRequest('or_isAllowedUser', {}, this.token);

            case 4:
              return _context6.abrupt("return", _context6.sent);

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function isAllowedUser() {
      return _isAllowedUser.apply(this, arguments);
    }

    return isAllowedUser;
  }()
  /**
   * Tests driver action. Authentication required.
   *
   * @param {Operation} step - Workflow step
   * @param input - Sample user input
   * @param {string} environment - Specifiy execution environment (`production` or `staging`). Optional. Default value `production`.
   * @returns {Promise} Promise object with action execution payload
   */
  ;

  _proto.testAction =
  /*#__PURE__*/
  function () {
    var _testAction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(step, input, environment) {
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (this.token) {
                _context7.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (step) {
                _context7.next = 4;
                break;
              }

              throw new Error('Workflow step object is required');

            case 4:
              if (input) {
                _context7.next = 6;
                break;
              }

              throw new Error('Sample input object is required');

            case 6:
              _context7.next = 8;
              return sendEngineRequest('or_testAction', {
                step: step,
                input: input,
                environment: environment || 'production'
              }, this.token);

            case 8:
              return _context7.abrupt("return", _context7.sent);

            case 9:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function testAction(_x11, _x12, _x13) {
      return _testAction.apply(this, arguments);
    }

    return testAction;
  }()
  /**
   * Gets list of available connectors/drivers
   * @deprecated since version 0.5.0
   * @returns {Promise} Promise object with an array of connectors/drivers
   */
  ;

  _proto.getConnectors =
  /*#__PURE__*/
  function () {
    var _getConnectors = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var responses, web2Connectors, i, url, web3Connectors, _i, _url;

      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              responses = [];
              _context8.next = 3;
              return axios.get(WEB2_CONNECTORS_PATH);

            case 3:
              web2Connectors = _context8.sent;
              i = 0;

            case 5:
              if (!(i < web2Connectors.data.length)) {
                _context8.next = 16;
                break;
              }

              url = web2Connectors.data[i].download_url;

              if (!url) {
                _context8.next = 13;
                break;
              }

              _context8.t0 = responses;
              _context8.next = 11;
              return axios.get(url);

            case 11:
              _context8.t1 = _context8.sent;

              _context8.t0.push.call(_context8.t0, _context8.t1);

            case 13:
              i++;
              _context8.next = 5;
              break;

            case 16:
              _context8.next = 18;
              return axios.get(WEB3_CONNECTORS_PATH);

            case 18:
              web3Connectors = _context8.sent;
              _i = 0;

            case 20:
              if (!(_i < web3Connectors.data.length)) {
                _context8.next = 31;
                break;
              }

              _url = web3Connectors.data[_i].download_url;

              if (!_url) {
                _context8.next = 28;
                break;
              }

              _context8.t2 = responses;
              _context8.next = 26;
              return axios.get(_url);

            case 26:
              _context8.t3 = _context8.sent;

              _context8.t2.push.call(_context8.t2, _context8.t3);

            case 28:
              _i++;
              _context8.next = 20;
              break;

            case 31:
              return _context8.abrupt("return", responses.filter(function (res) {
                return res && res.data;
              }).map(function (res) {
                return _extends({}, res.data, {
                  html_url: Array.isArray(web3Connectors.data) && web3Connectors.data.find(function (c) {
                    return c.name && c.name.includes(res.data.key);
                  }) && web3Connectors.data.find(function (c) {
                    return c.name && c.name.includes(res.data.key);
                  }).html_url || Array.isArray(web2Connectors.data) && web2Connectors.data.find(function (c) {
                    return c.name && c.name.includes(res.data.key);
                  }) && web2Connectors.data.find(function (c) {
                    return c.name && c.name.includes(res.data.key);
                  }).html_url || ''
                });
              }));

            case 32:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    function getConnectors() {
      return _getConnectors.apply(this, arguments);
    }

    return getConnectors;
  }()
  /**
   * Deletes user's workflow by key. Authentication required.
   *
   * @param {string} key - Workflow key
   * @returns {Promise} Promise object with `deleted` property `true` or `false`
   */
  ;

  _proto.deleteWorkflow =
  /*#__PURE__*/
  function () {
    var _deleteWorkflow = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(key) {
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (this.token) {
                _context9.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (key) {
                _context9.next = 4;
                break;
              }

              throw new Error('Workflow key is required');

            case 4:
              _context9.next = 6;
              return sendEngineRequest('or_deleteWorkflow', {
                key: key
              }, this.token);

            case 6:
              return _context9.abrupt("return", _context9.sent);

            case 7:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function deleteWorkflow(_x14) {
      return _deleteWorkflow.apply(this, arguments);
    }

    return deleteWorkflow;
  }()
  /**
   * Requests early access to Nexus app. Authentication required.
   *
   * @param {string} email - User email
   * @returns {Promise} Promise object with `true` on success
   */
  ;

  _proto.requestEarlyAccess =
  /*#__PURE__*/
  function () {
    var _requestEarlyAccess = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(email) {
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (this.token) {
                _context10.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (email) {
                _context10.next = 4;
                break;
              }

              throw new Error('Email is required');

            case 4:
              if (/^[^\s@]+@([^\s@.,]+\.)+[^\s@.,]{2,}$/.test(email)) {
                _context10.next = 6;
                break;
              }

              throw new Error('Invalid email');

            case 6:
              _context10.next = 8;
              return sendEngineRequest('or_requestEarlyAccess', {
                email: email
              }, this.token);

            case 8:
              return _context10.abrupt("return", _context10.sent);

            case 9:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function requestEarlyAccess(_x15) {
      return _requestEarlyAccess.apply(this, arguments);
    }

    return requestEarlyAccess;
  }()
  /**
   * Saves user wallet address in CRM. Authentication required.
   *
   * @param {string} walletAddress - User wallet address
   * @param {string} [email] - User email, optional
   * @returns {Promise} Promise object with `true` on success
   */
  ;

  _proto.saveWalletAddress =
  /*#__PURE__*/
  function () {
    var _saveWalletAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(walletAddress, email) {
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              if (this.token) {
                _context11.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (walletAddress) {
                _context11.next = 4;
                break;
              }

              throw new Error('Wallet address is required');

            case 4:
              if (!(email && !/^[^\s@]+@([^\s@.,]+\.)+[^\s@.,]{2,}$/.test(email))) {
                _context11.next = 6;
                break;
              }

              throw new Error('Invalid email');

            case 6:
              _context11.next = 8;
              return sendEngineRequest('or_saveWalletAddress', {
                email: email,
                walletAddress: walletAddress
              }, this.token);

            case 8:
              return _context11.abrupt("return", _context11.sent);

            case 9:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function saveWalletAddress(_x16, _x17) {
      return _saveWalletAddress.apply(this, arguments);
    }

    return saveWalletAddress;
  }()
  /**
   * Sends request to an operation's `inputFieldProviderUrl`. Authentication required.
   *
   * @param {string} connectorKey - Connector key
   * @param {string} operationKey - Trigger or Action operation key
   * @param {object} body - JSON RPC request object with user input
   * @param {string} environment - Specifiy execution environment. Use `staging` for staging environment. Optional.
   * @returns {Promise} Promise object with operation's field provider response
   */
  ;

  _proto.callInputProvider =
  /*#__PURE__*/
  function () {
    var _callInputProvider = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(connectorKey, operationKey, body, environment) {
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              if (this.token) {
                _context12.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (connectorKey) {
                _context12.next = 4;
                break;
              }

              throw new Error('Connector key is required');

            case 4:
              if (operationKey) {
                _context12.next = 6;
                break;
              }

              throw new Error('Operation key is required');

            case 6:
              if (body) {
                _context12.next = 8;
                break;
              }

              throw new Error('JSON RPC request object is required');

            case 8:
              if (!(!body.method || body.method !== 'grinderyNexusConnectorUpdateFields')) {
                _context12.next = 10;
                break;
              }

              throw new Error('JSON RPC request object must have "method" property with value "grinderyNexusConnectorUpdateFields"');

            case 10:
              if (!(!body.jsonrpc || body.jsonrpc !== '2.0')) {
                _context12.next = 12;
                break;
              }

              throw new Error('JSON RPC request object must have 2.0 version');

            case 12:
              if (!(!body.params || !body.params.key)) {
                _context12.next = 14;
                break;
              }

              throw new Error('JSON RPC request object must have "params" property with operation key specified');

            case 14:
              if (!(body.params.key !== operationKey)) {
                _context12.next = 16;
                break;
              }

              throw new Error('JSON RPC request object params "key" property must be equal to operationKey');

            case 16:
              _context12.next = 18;
              return sendEngineHTTPRequest('POST', "/input-provider/" + connectorKey + "/" + operationKey + (environment ? '?_grinderyEnvironment=' + environment : ''), body, this.token);

            case 18:
              return _context12.abrupt("return", _context12.sent);

            case 19:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function callInputProvider(_x18, _x19, _x20, _x21) {
      return _callInputProvider.apply(this, arguments);
    }

    return callInputProvider;
  }()
  /**
   * Sends webhook to a trigger
   *
   * @param {string} connectorKey - Connector key
   * @param {string} operationKey - Trigger operation key
   * @param {object} body - JSON body
   * @param {string} environment - Specifiy execution environment. Use `staging` for staging environment. Optional.
   * @returns {Promise} Promise object with JSON RPC 2.0 response
   */
  ;

  _proto.callWebhook =
  /*#__PURE__*/
  function () {
    var _callWebhook = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(connectorKey, operationKey, body, environment) {
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              if (connectorKey) {
                _context13.next = 2;
                break;
              }

              throw new Error('Connector key is required');

            case 2:
              if (operationKey) {
                _context13.next = 4;
                break;
              }

              throw new Error('Operation key is required');

            case 4:
              if (body) {
                _context13.next = 6;
                break;
              }

              throw new Error('Body object is required');

            case 6:
              _context13.next = 8;
              return sendEngineHTTPRequest('POST', "/webhook/" + connectorKey + "/" + operationKey + (environment ? '?_grinderyEnvironment=' + environment : ''), body);

            case 8:
              return _context13.abrupt("return", _context13.sent);

            case 9:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));

    function callWebhook(_x22, _x23, _x24, _x25) {
      return _callWebhook.apply(this, arguments);
    }

    return callWebhook;
  }()
  /**
   * Gets list of drivers
   *
   * @since 0.5.0
   * @param {string} environment - Set environment for getting drivers. Optional.
   * @returns {Promise} Promise object with an array of drivers
   */
  ;

  _proto.listDrivers =
  /*#__PURE__*/
  function () {
    var _listDrivers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(environment) {
      var driversIndexURL, res;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              driversIndexURL = DRIVERS_URL + "/_index.json";

              if (environment && environment === 'staging') {
                driversIndexURL = DRIVERS_STAGING_URL + "/_index.json";
              }

              _context14.next = 4;
              return axios.get(driversIndexURL)["catch"](function () {
                return null;
              });

            case 4:
              res = _context14.sent;

              if (!(res && res.data)) {
                _context14.next = 9;
                break;
              }

              return _context14.abrupt("return", Object.keys(res.data).map(function (key) {
                return _extends({}, res.data[key]);
              }));

            case 9:
              return _context14.abrupt("return", []);

            case 10:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    function listDrivers(_x26) {
      return _listDrivers.apply(this, arguments);
    }

    return listDrivers;
  }()
  /**
   * Gets single driver
   *
   * @since 0.5.0
   * @param {string} driverKey - Driver key
   * @param {string} environment - Set environment for getting driver. Optional.
   * @returns {Promise} Promise object with a CDS object or `null` if driver not found
   */
  ;

  _proto.getDriver =
  /*#__PURE__*/
  function () {
    var _getDriver = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(driverKey, environment) {
      var driverURL, res;
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              if (driverKey) {
                _context15.next = 2;
                break;
              }

              throw new Error('Driver key required');

            case 2:
              driverURL = DRIVERS_URL + "/" + driverKey + ".json";

              if (environment && environment === 'staging') {
                driverURL = DRIVERS_STAGING_URL + "/" + driverKey + ".json";
              }

              _context15.next = 6;
              return axios.get(driverURL)["catch"](function () {
                return null;
              });

            case 6:
              res = _context15.sent;

              if (!(res && res.data)) {
                _context15.next = 11;
                break;
              }

              return _context15.abrupt("return", res.data);

            case 11:
              return _context15.abrupt("return", null);

            case 12:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    function getDriver(_x27, _x28) {
      return _getDriver.apply(this, arguments);
    }

    return getDriver;
  }()
  /**
   * Gets list of user's workspaces
   *
   * @since 0.6.0
   * @returns {Promise} Promise object with an array of user's workspaces
   */
  ;

  _proto.listWorkspaces =
  /*#__PURE__*/
  function () {
    var _listWorkspaces = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
      return _regeneratorRuntime().wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              if (this.token) {
                _context16.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              _context16.next = 4;
              return sendEngineRequest('or_listWorkspaces', {}, this.token);

            case 4:
              return _context16.abrupt("return", _context16.sent);

            case 5:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function listWorkspaces() {
      return _listWorkspaces.apply(this, arguments);
    }

    return listWorkspaces;
  }()
  /**
   * Creates new workspace
   *
   * @since 0.6.0
   * @param {object} workspace - Workspace properties
   * @returns {Promise} Promise object with a created workspace key
   */
  ;

  _proto.createWorkspace =
  /*#__PURE__*/
  function () {
    var _createWorkspace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(workspace) {
      return _regeneratorRuntime().wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              if (this.token) {
                _context17.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (workspace.title) {
                _context17.next = 4;
                break;
              }

              throw new Error('Workspace title is required');

            case 4:
              _context17.next = 6;
              return sendEngineRequest('or_createWorkspace', workspace, this.token);

            case 6:
              return _context17.abrupt("return", _context17.sent);

            case 7:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function createWorkspace(_x29) {
      return _createWorkspace.apply(this, arguments);
    }

    return createWorkspace;
  }()
  /**
   * Updates a workspace
   *
   * @since 0.6.0
   * @param {object} workspace - Workspace properties
   * @returns {Promise} Promise object with an updated workspace
   */
  ;

  _proto.updateWorkspace =
  /*#__PURE__*/
  function () {
    var _updateWorkspace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(workspace) {
      return _regeneratorRuntime().wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              if (this.token) {
                _context18.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (workspace.key) {
                _context18.next = 4;
                break;
              }

              throw new Error('Workspace key is required');

            case 4:
              if (!(workspace.admins && !Array.isArray(workspace.admins))) {
                _context18.next = 6;
                break;
              }

              throw new Error('Admins must be an array');

            case 6:
              if (!(workspace.users && !Array.isArray(workspace.users))) {
                _context18.next = 8;
                break;
              }

              throw new Error('Users must be an array');

            case 8:
              _context18.next = 10;
              return sendEngineRequest('or_updateWorkspace', workspace, this.token);

            case 10:
              return _context18.abrupt("return", _context18.sent);

            case 11:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function updateWorkspace(_x30) {
      return _updateWorkspace.apply(this, arguments);
    }

    return updateWorkspace;
  }()
  /**
   * Removes user from a workspace
   *
   * @since 0.6.0
   * @param {string} key - Workspace key
   * @returns {Promise} Promise object with a `left` property equals `true` on success
   */
  ;

  _proto.leaveWorkspace =
  /*#__PURE__*/
  function () {
    var _leaveWorkspace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(key) {
      return _regeneratorRuntime().wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              if (this.token) {
                _context19.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (key) {
                _context19.next = 4;
                break;
              }

              throw new Error('Workspace key is required');

            case 4:
              _context19.next = 6;
              return sendEngineRequest('or_leaveWorkspace', {
                key: key
              }, this.token);

            case 6:
              return _context19.abrupt("return", _context19.sent);

            case 7:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function leaveWorkspace(_x31) {
      return _leaveWorkspace.apply(this, arguments);
    }

    return leaveWorkspace;
  }()
  /**
   * Deletes workspace
   *
   * @since 0.6.0
   * @param {string} key - Workspace key
   * @returns {Promise} Promise object with `true` on success
   */
  ;

  _proto.deleteWorkspace =
  /*#__PURE__*/
  function () {
    var _deleteWorkspace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(key) {
      return _regeneratorRuntime().wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              if (this.token) {
                _context20.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (key) {
                _context20.next = 4;
                break;
              }

              throw new Error('Workspace key is required');

            case 4:
              _context20.next = 6;
              return sendEngineRequest('or_deleteWorkspace', {
                key: key
              }, this.token);

            case 6:
              return _context20.abrupt("return", _context20.sent);

            case 7:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function deleteWorkspace(_x32) {
      return _deleteWorkspace.apply(this, arguments);
    }

    return deleteWorkspace;
  }()
  /**
   * Moves workflow to a workspace
   *
   * @since 0.6.0
   * @param {string} workflowKey - Workflow key
   * @param {string} workspaceKey - The destination workspace key
   * @returns {Promise} Promise object with `true` on success
   */
  ;

  _proto.moveWorkflowToWorkspace =
  /*#__PURE__*/
  function () {
    var _moveWorkflowToWorkspace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(workflowKey, workspaceKey) {
      return _regeneratorRuntime().wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              if (this.token) {
                _context21.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (workflowKey) {
                _context21.next = 4;
                break;
              }

              throw new Error('Workflow key is required');

            case 4:
              _context21.next = 6;
              return sendEngineRequest('or_moveWorkflowToWorkspace', {
                key: workflowKey,
                newWorkspaceKey: workspaceKey
              }, this.token);

            case 6:
              return _context21.abrupt("return", _context21.sent);

            case 7:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function moveWorkflowToWorkspace(_x33, _x34) {
      return _moveWorkflowToWorkspace.apply(this, arguments);
    }

    return moveWorkflowToWorkspace;
  }()
  /**
   * Adds user (member) to a workspace
   *
   * @since 0.6.0
   * @param {string} key - Workspace key
   * @param {string} userAccountId - User account ID
   * @returns {Promise} Promise object with updated workspace properties
   */
  ;

  _proto.addUserToWorkspace =
  /*#__PURE__*/
  function () {
    var _addUserToWorkspace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(key, userAccountId) {
      return _regeneratorRuntime().wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              if (this.token) {
                _context22.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (key) {
                _context22.next = 4;
                break;
              }

              throw new Error('Workspace key is required');

            case 4:
              if (userAccountId) {
                _context22.next = 6;
                break;
              }

              throw new Error('User ID is required');

            case 6:
              _context22.next = 8;
              return sendEngineRequest('or_workspaceAddUser', {
                key: key,
                accountId: userAccountId
              }, this.token);

            case 8:
              return _context22.abrupt("return", _context22.sent);

            case 9:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function addUserToWorkspace(_x35, _x36) {
      return _addUserToWorkspace.apply(this, arguments);
    }

    return addUserToWorkspace;
  }()
  /**
   * Removes user (member) from a workspace
   *
   * @since 0.6.0
   * @param {string} key - Workspace key
   * @param {string} userAccountId - User account ID
   * @returns {Promise} Promise object with updated workspace properties
   */
  ;

  _proto.removeUserFromWorkspace =
  /*#__PURE__*/
  function () {
    var _removeUserFromWorkspace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(key, userAccountId) {
      return _regeneratorRuntime().wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              if (this.token) {
                _context23.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (key) {
                _context23.next = 4;
                break;
              }

              throw new Error('Workspace key is required');

            case 4:
              if (userAccountId) {
                _context23.next = 6;
                break;
              }

              throw new Error('User ID is required');

            case 6:
              _context23.next = 8;
              return sendEngineRequest('or_workspaceRemoveUser', {
                key: key,
                accountId: userAccountId
              }, this.token);

            case 8:
              return _context23.abrupt("return", _context23.sent);

            case 9:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function removeUserFromWorkspace(_x37, _x38) {
      return _removeUserFromWorkspace.apply(this, arguments);
    }

    return removeUserFromWorkspace;
  }()
  /**
   * Adds admin to a workspace
   *
   * @since 0.6.0
   * @param {string} key - Workspace key
   * @param {string} userAccountId - User account ID
   * @returns {Promise} Promise object with updated workspace properties
   */
  ;

  _proto.addAdminToWorkspace =
  /*#__PURE__*/
  function () {
    var _addAdminToWorkspace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(key, userAccountId) {
      return _regeneratorRuntime().wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              if (this.token) {
                _context24.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (key) {
                _context24.next = 4;
                break;
              }

              throw new Error('Workspace key is required');

            case 4:
              if (userAccountId) {
                _context24.next = 6;
                break;
              }

              throw new Error('User ID is required');

            case 6:
              _context24.next = 8;
              return sendEngineRequest('or_workspaceAddAdmin', {
                key: key,
                accountId: userAccountId
              }, this.token);

            case 8:
              return _context24.abrupt("return", _context24.sent);

            case 9:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24, this);
    }));

    function addAdminToWorkspace(_x39, _x40) {
      return _addAdminToWorkspace.apply(this, arguments);
    }

    return addAdminToWorkspace;
  }()
  /**
   * Removes admin from a workspace
   *
   * @since 0.6.0
   * @param {string} key - Workspace key
   * @param {string} userAccountId - User account ID
   * @returns {Promise} Promise object with updated workspace properties
   */
  ;

  _proto.removeAdminFromWorkspace =
  /*#__PURE__*/
  function () {
    var _removeAdminFromWorkspace = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(key, userAccountId) {
      return _regeneratorRuntime().wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              if (this.token) {
                _context25.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (key) {
                _context25.next = 4;
                break;
              }

              throw new Error('Workspace key is required');

            case 4:
              if (userAccountId) {
                _context25.next = 6;
                break;
              }

              throw new Error('User ID is required');

            case 6:
              _context25.next = 8;
              return sendEngineRequest('or_workspaceRemoveAdmin', {
                key: key,
                accountId: userAccountId
              }, this.token);

            case 8:
              return _context25.abrupt("return", _context25.sent);

            case 9:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25, this);
    }));

    function removeAdminFromWorkspace(_x41, _x42) {
      return _removeAdminFromWorkspace.apply(this, arguments);
    }

    return removeAdminFromWorkspace;
  }()
  /**
   * Gets list of user's saved authentication credentials. Authentication required.
   *
   * @since 0.7.0
   * @param {string} connectorId - Connector key
   * @param {string} environment - Environment (`production` or `staging`)
   * @returns {Promise} Promise object with a list of saved credentials
   */
  ;

  _proto.listAuthCredentials =
  /*#__PURE__*/
  function () {
    var _listAuthCredentials = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(connectorId, environment) {
      return _regeneratorRuntime().wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              if (this.token) {
                _context26.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (connectorId) {
                _context26.next = 4;
                break;
              }

              throw new Error('Connector ID is required');

            case 4:
              if (environment) {
                _context26.next = 6;
                break;
              }

              throw new Error('Environment is required');

            case 6:
              _context26.next = 8;
              return sendEngineRequest('or_listAuthCredentials', {
                connectorId: connectorId,
                environment: environment
              }, this.token);

            case 8:
              return _context26.abrupt("return", _context26.sent);

            case 9:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26, this);
    }));

    function listAuthCredentials(_x43, _x44) {
      return _listAuthCredentials.apply(this, arguments);
    }

    return listAuthCredentials;
  }()
  /**
   * Updates saved authentication credential. Authentication required.
   *
   * @since 0.7.0
   * @param {string} key - Credential key
   * @param {string} displayName - New display name
   * @returns {Promise} Promise object with updated credential
   */
  ;

  _proto.updateAuthCredentials =
  /*#__PURE__*/
  function () {
    var _updateAuthCredentials = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(key, displayName) {
      return _regeneratorRuntime().wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              if (this.token) {
                _context27.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (key) {
                _context27.next = 4;
                break;
              }

              throw new Error('Credential key is required');

            case 4:
              if (displayName) {
                _context27.next = 6;
                break;
              }

              throw new Error('Display name is required');

            case 6:
              _context27.next = 8;
              return sendEngineRequest('or_updateAuthCredentials', {
                key: key,
                displayName: displayName
              }, this.token);

            case 8:
              return _context27.abrupt("return", _context27.sent);

            case 9:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27, this);
    }));

    function updateAuthCredentials(_x45, _x46) {
      return _updateAuthCredentials.apply(this, arguments);
    }

    return updateAuthCredentials;
  }()
  /**
   * Adds connector secrets (for admin only). Authentication required.
   *
   * @since 0.7.0
   * @param {string} connectorId - Credential key
   * @param {object} secrets - Object with key-value pairs
   * @param {string} environment - Environment (`production` or `staging`)
   * @returns {Promise} Promise
   */
  ;

  _proto.putConnectorSecrets =
  /*#__PURE__*/
  function () {
    var _putConnectorSecrets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(connectorId, secrets, environment) {
      return _regeneratorRuntime().wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              if (this.token) {
                _context28.next = 2;
                break;
              }

              throw new Error('Authentication required');

            case 2:
              if (connectorId) {
                _context28.next = 4;
                break;
              }

              throw new Error('Connector ID is required');

            case 4:
              if (secrets) {
                _context28.next = 6;
                break;
              }

              throw new Error('Secrets object is required');

            case 6:
              if (environment) {
                _context28.next = 8;
                break;
              }

              throw new Error('Environment is required');

            case 8:
              _context28.next = 10;
              return sendEngineRequest('or_putConnectorSecrets', {
                connectorId: connectorId,
                secrets: secrets,
                environment: environment
              }, this.token);

            case 10:
              return _context28.abrupt("return", _context28.sent);

            case 11:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28, this);
    }));

    function putConnectorSecrets(_x47, _x48, _x49) {
      return _putConnectorSecrets.apply(this, arguments);
    }

    return putConnectorSecrets;
  }();

  return NexusClient;
}();

export default NexusClient;
//# sourceMappingURL=grindery-nexus-client.esm.js.map
