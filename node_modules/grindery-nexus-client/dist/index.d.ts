import { WorkflowExecution, WorkflowExecutionLog, Operation, Workflow } from './types';
/**
 * Grindery Nexus Client
 *
 * @description A class to interact with Grindery Nexus engine API
 */
declare class NexusClient {
    /**
     * User authentication token
     */
    private token;
    constructor();
    /**
     * Set authentication token
     *
     * @param {string} token - Authentication token
     * @returns {void}
     */
    authenticate(token: string): void;
    /**
     * Get current authentication token. Authentication required.
     * @returns {string} Authentication token
     */
    getToken(): string;
    /**
     * Creates new workflow. Authentication required.
     * @param {Workflow} workflow - New workflow object
     * @param {string} workspaceKey - Workspace key. Optional
     * @returns {Promise} Promise object with new workflow key
     */
    createWorkflow(workflow: Workflow, workspaceKey?: string): Promise<any>;
    /**
     * Lists user's workflows. Authentication required.
     *
     * @param {string} workspaceKey - Workspace key. Optional.
     * @returns {Promise} Promise object with an array of user's workflows
     */
    listWorkflows(workspaceKey?: string): Promise<any>;
    /**
     * Updates a single workflow. Authentication required.
     *
     * @param {string} key - Workflow key
     * @param {Workflow} workflow - Updated workflow object
     * @returns {Promise} Promise object with workflow key
     */
    updateWorkflow(key: string, workflow: Workflow): Promise<any>;
    /**
     * Gets workflow executions. Authentication required.
     *
     * @param {string} workflowKey - Workflow key
     * @param {number} since - Since parameter used for pagination. Optional.
     * @param {number} until - Until parameter used for pagination. Optional.
     * @param {number} limit - Limit parameter used for pagination. Optional.
     * @returns {Promise} Promise object with an array of workflow executions
     */
    getWorkflowExecutions(workflowKey: string, since?: number, until?: number, limit?: number): Promise<any>;
    /**
     * Gets workflow execution log. Authentication required.
     *
     * @param {string} executionId - Workflow execution ID
     * @returns {Promise} Promise object with workflow execution log
     */
    getWorkflowExecutionLog(executionId: string): Promise<any>;
    /**
     * Checks if user is approved for early access. Authentication required.
     *
     * @returns {Promise} Promise object with `true` if user is allowed and `false` if not
     */
    isAllowedUser(): Promise<any>;
    /**
     * Tests driver action. Authentication required.
     *
     * @param {Operation} step - Workflow step
     * @param input - Sample user input
     * @param {string} environment - Specifiy execution environment (`production` or `staging`). Optional. Default value `production`.
     * @returns {Promise} Promise object with action execution payload
     */
    testAction(step: Operation, input: unknown, environment?: string): Promise<any>;
    /**
     * Gets list of available connectors/drivers
     * @deprecated since version 0.5.0
     * @returns {Promise} Promise object with an array of connectors/drivers
     */
    getConnectors(): Promise<any>;
    /**
     * Deletes user's workflow by key. Authentication required.
     *
     * @param {string} key - Workflow key
     * @returns {Promise} Promise object with `deleted` property `true` or `false`
     */
    deleteWorkflow(key: string): Promise<{
        deleted: boolean;
    }>;
    /**
     * Requests early access to Nexus app. Authentication required.
     *
     * @param {string} email - User email
     * @returns {Promise} Promise object with `true` on success
     */
    requestEarlyAccess(email: string): Promise<any>;
    /**
     * Saves user wallet address in CRM. Authentication required.
     *
     * @param {string} walletAddress - User wallet address
     * @param {string} [email] - User email, optional
     * @returns {Promise} Promise object with `true` on success
     */
    saveWalletAddress(walletAddress: string, email?: string): Promise<any>;
    /**
     * Sends request to an operation's `inputFieldProviderUrl`. Authentication required.
     *
     * @param {string} connectorKey - Connector key
     * @param {string} operationKey - Trigger or Action operation key
     * @param {object} body - JSON RPC request object with user input
     * @param {string} environment - Specifiy execution environment. Use `staging` for staging environment. Optional.
     * @returns {Promise} Promise object with operation's field provider response
     */
    callInputProvider(connectorKey: string, operationKey: string, body: any, environment?: string): Promise<any>;
    /**
     * Sends webhook to a trigger
     *
     * @param {string} connectorKey - Connector key
     * @param {string} operationKey - Trigger operation key
     * @param {object} body - JSON body
     * @param {string} environment - Specifiy execution environment. Use `staging` for staging environment. Optional.
     * @returns {Promise} Promise object with JSON RPC 2.0 response
     */
    callWebhook(connectorKey: string, operationKey: string, body: any, environment?: string): Promise<any>;
    /**
     * Gets list of drivers
     *
     * @since 0.5.0
     * @param {string} environment - Set environment for getting drivers. Optional.
     * @returns {Promise} Promise object with an array of drivers
     */
    listDrivers(environment?: string): Promise<any>;
    /**
     * Gets single driver
     *
     * @since 0.5.0
     * @param {string} driverKey - Driver key
     * @param {string} environment - Set environment for getting driver. Optional.
     * @returns {Promise} Promise object with a CDS object or `null` if driver not found
     */
    getDriver(driverKey: string, environment?: string): Promise<any>;
    /**
     * Gets list of user's workspaces
     *
     * @since 0.6.0
     * @returns {Promise} Promise object with an array of user's workspaces
     */
    listWorkspaces(): Promise<any>;
    /**
     * Creates new workspace
     *
     * @since 0.6.0
     * @param {object} workspace - Workspace properties
     * @returns {Promise} Promise object with a created workspace key
     */
    createWorkspace(workspace: {
        title: string;
        iconUrl?: string;
        about?: string;
        admins?: string[];
        users?: string[];
    }): Promise<any>;
    /**
     * Updates a workspace
     *
     * @since 0.6.0
     * @param {object} workspace - Workspace properties
     * @returns {Promise} Promise object with an updated workspace
     */
    updateWorkspace(workspace: {
        key: string;
        title?: string;
        iconUrl?: string;
        about?: string;
        admins?: string[];
        users?: string[];
    }): Promise<any>;
    /**
     * Removes user from a workspace
     *
     * @since 0.6.0
     * @param {string} key - Workspace key
     * @returns {Promise} Promise object with a `left` property equals `true` on success
     */
    leaveWorkspace(key: string): Promise<any>;
    /**
     * Deletes workspace
     *
     * @since 0.6.0
     * @param {string} key - Workspace key
     * @returns {Promise} Promise object with `true` on success
     */
    deleteWorkspace(key: string): Promise<any>;
    /**
     * Moves workflow to a workspace
     *
     * @since 0.6.0
     * @param {string} workflowKey - Workflow key
     * @param {string} workspaceKey - The destination workspace key
     * @returns {Promise} Promise object with `true` on success
     */
    moveWorkflowToWorkspace(workflowKey: string, workspaceKey: string): Promise<any>;
    /**
     * Adds user (member) to a workspace
     *
     * @since 0.6.0
     * @param {string} key - Workspace key
     * @param {string} userAccountId - User account ID
     * @returns {Promise} Promise object with updated workspace properties
     */
    addUserToWorkspace(key: string, userAccountId: string): Promise<any>;
    /**
     * Removes user (member) from a workspace
     *
     * @since 0.6.0
     * @param {string} key - Workspace key
     * @param {string} userAccountId - User account ID
     * @returns {Promise} Promise object with updated workspace properties
     */
    removeUserFromWorkspace(key: string, userAccountId: string): Promise<any>;
    /**
     * Adds admin to a workspace
     *
     * @since 0.6.0
     * @param {string} key - Workspace key
     * @param {string} userAccountId - User account ID
     * @returns {Promise} Promise object with updated workspace properties
     */
    addAdminToWorkspace(key: string, userAccountId: string): Promise<any>;
    /**
     * Removes admin from a workspace
     *
     * @since 0.6.0
     * @param {string} key - Workspace key
     * @param {string} userAccountId - User account ID
     * @returns {Promise} Promise object with updated workspace properties
     */
    removeAdminFromWorkspace(key: string, userAccountId: string): Promise<any>;
    /**
     * Gets list of user's saved authentication credentials. Authentication required.
     *
     * @since 0.7.0
     * @param {string} connectorId - Connector key
     * @param {string} environment - Environment (`production` or `staging`)
     * @returns {Promise} Promise object with a list of saved credentials
     */
    listAuthCredentials(connectorId: string, environment: string): Promise<any>;
    /**
     * Updates saved authentication credential. Authentication required.
     *
     * @since 0.7.0
     * @param {string} key - Credential key
     * @param {string} displayName - New display name
     * @returns {Promise} Promise object with updated credential
     */
    updateAuthCredentials(key: string, displayName: string): Promise<any>;
    /**
     * Adds connector secrets (for admin only). Authentication required.
     *
     * @since 0.7.0
     * @param {string} connectorId - Credential key
     * @param {object} secrets - Object with key-value pairs
     * @param {string} environment - Environment (`production` or `staging`)
     * @returns {Promise} Promise
     */
    putConnectorSecrets(connectorId: string, secrets: {
        [key: string]: unknown;
    }, environment: string): Promise<any>;
}
export { Operation, Workflow, WorkflowExecution, WorkflowExecutionLog };
export default NexusClient;
